# The name of your workflow. Name this however you like!
name: Dusk

# Run these tests on the push of code
on: [push]

jobs:
  dusk:
    # The operating system to run on
    runs-on: ubuntu-latest
    env:
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    services:
      # Set up the Redis service (if you need it)
      redis:
        image: redis
        env:
            REDIS_HOST: localhost
            REDIS_PORT: 6379
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Checks out your repository so your workflow can access it
      - uses: actions/checkout@v4

      # Creates the MySQL database with "root" and "root" as the username and password respectively
      # The database has the same name we specified in .env.dusk.ci
      - name: Set up MySQL
        run: |
          sudo systemctl start mysql
          mysql --user="root" --password="${{ secrets.DB_PASSWORD }}" -e "CREATE DATABASE \`laravel_dusk_testing\` character set UTF8mb4 collate utf8mb4_bin;"

      # Setup PHP with a specific version (8.3)
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      # Copy the .env.dusk.ci file we commited to the .env that'll be used by Laravel
      - name: Copy .env
        run: cp .env.dusk.ci .env

      # Install Composer dependencies without showing progress, with dist and an optimized autoload (both potentially faster)
      - name: Install Dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      # Generate a new application key, which fills in APP_KEY in .env
      - name: Generate key
        run: php artisan key:generate

      # Run the Laravel application migrations
      - name: Run migration
        run: php artisan migrate

      # Install the Chrome binaries required for Dusk to run tests
      - name: Install Chrome binaries
        run: php artisan dusk:chrome-driver --detect

      # Start the Chrome driver so we're able to run browser tests with Chrome
      - name: Start Chrome Driver
        run: ./vendor/laravel/dusk/bin/chromedriver-linux &

      # Build assets. This could vary for your setup.
      - name: Build assets
        run: npm install && npm run build

      # Start a basic Laravel server with no reloading
      - name: Run Laravel Server
        run: php artisan serve --no-reload &

      # Run our Dusk test suite. This could be different if you don't use Pest (e.g. php artisan dusk)
      - name: Execute tests
        run: php artisan pest:dusk

      # If there's a failure, upload the Dusk screenshots as an artifact
      - name: Upload Screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: tests/Browser/screenshots

      # If there's a failure, upload the Dusk console logs as an artifact
      - name: Upload Console Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: console
          path: tests/Browser/console